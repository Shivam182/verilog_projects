/*

Working/Description
1. Components like SRAM/DRAM act as AHB Slaves.
2. They respond to the requests generated by the AHB Masters (CPUs/DMAs).
3. It basically acts as a target device in bus transactions.
4. Key responsibilities: Address decoding, Data Handling (Rd/Wr), Send response staus back to master.
5. This makes use of pipelining, processing address, control & data parts in a pipeline.
 	
**/


module Ahb_slave(
	input Hclk, Hresetn, // Clock and reset negative signals
	input Hwrite, Hreadyin, // write signal comes from master and used as input into Ahb slave
	input [1:0] Htrans, // indicates kind of transaction
	input [31:0] Haddr, Hwdata, Prdata, // 'P' stands for peripheral read data, it reads data from peripherals
	
	output reg valid, 
	output reg [31:0] Haddr1, Haddr2, Hwdata1, Hwdata2,
	output [31:0] Hrdata, // carries the read data
	output reg Hwritereg, // This is an internal register that stores the value of Hwrite signal during a transaction.
	output reg [2:0] tempselx, // temp register
	output [1:0] Hresp // returns output response to the master about the status of current transaction.
);

// Pipelining Implementation


/** Address Pipeline Logic */
always @(posedge Hclk) begin 

	if(!Hresetn) begin 
		Haddr1 <= 0;
		Haddr2 <= 0;
	end 
	else begin 
		Haddr1 <= Haddr;
		Haddr2 <= Haddr1;
	end

end


/** Data Pipeline Logic */
always @(posedge Hclk) begin 

	if(!Hresetn) begin 
		Hwdata1 <= 0;
		Hwdata2 <= 0;
	end
	else begin 
		Hwdata1 <= Hwdata;
		Hwdata2 <= Hwdata1;
	end

end


/** Write signal holding */
always @(posedge Hclk) begin

	if(!Hresetn) begin
		Hwritereg <= 0;
	end
	else begin 
		Hwritereg <= Hwrite;
	end

end


// Valid Logic Implementation 

always @(Hreadyin, Hresetn, Haddr, Htrans) begin

	valid = 0;
	if (Hresetn && Hreadyin && (Haddr>=32'h8000_0000 && Haddr<32'h8C00_0000) && (Htrans==2'b10 || Htrans==2'b11) )
	    valid=1;

end


// Implement templex logic
always @(Haddr, Hresetn) begin

	tempselx = 3'b000;
	if (Hresetn && Haddr>=32'h8000_0000 && Haddr<32'h8400_0000)
		tempselx=3'b001;
	else if (Hresetn && Haddr>=32'h8400_0000 && Haddr<32'h8800_0000)
		tempselx=3'b010;
	else if (Hresetn && Haddr>=32'h8800_0000 && Haddr<32'h8C00_0000)
		tempselx=3'b100;


end

assign Hrdata = Prdata;
assign Hresp=2'b00;

endmodule 
